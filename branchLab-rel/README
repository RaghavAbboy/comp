CSE240a Branch Predictor Project
----------------------------------------------------------------------

As weâ€™ve discussed in class, branch prediction is critical to performance in
modern processors.  An accurate branch predictor ensures that the front-end of
the machine is capable of feeding the back-end with correct-path instructions.
Beyond its criticality in processor execution, branch prediction is an
interesting problem.  How do you make accurate predictions on little data using
small, fast hardware structures.

For this Project you will be implementing various branch predictors in a
simulated environment.  We have provided a starting framework to help you
design your predictors.  The framework (main.c) will perform all of the
command-line switches as well as the reading in of the trace files.  You will
implement your predictors by completing all of the TODOs in the predictor.c
file.  Note that this is the only file in which you are able to make changes,
as it will be the only file of yours we use for grading.

------------
-- Traces --
------------

These predictors will make predictions based on traces of real programs.  Each
line in the trace file contains the address of a branch in hex as well as its
outcome (Not Taken = 0, Taken = 1):

<Address> <Outcome>

Sample Trace from int_1:
0x40d7f9 0
0x40d81e 1
0x40d7f9 1
0x40d81e 0
0x40d83d 0
0x40d86d 1
0x40d86d 1
0x40d86d 1
0x40d86d 1
0x40d86d 1

Will will be providing test traces to you to aid in testing your project but we
strongly suggest that you create your own custom traces to use for debugging.

----------------------------
-- Running your Predictor --
----------------------------

In order to build your predictor you simply need to run make in the src/
directory of the project.  You can then run the program on an uncompressed
trace as follows:
  ./predictor <options> [<trace>]

If no trace file is provided then the predictor will read in input from STDIN.
Some of the traces we provided are rather large when uncompressed so we have
distributed them compressed with bzip2.  If you want to run your predictor on
a compressed trace then you can do so by doing the following:
  bunzip -kc trace.bz2 | ./predictor <options>

In either case the <options> that can be used to change the type of predictor
being run are as follows:
  --help       Print usage message
  --<type>     Branch prediction scheme:
     static
     gshare:<# ghistory>
     local:<# lhistory>:<# index>
     tournament:<# ghistory>:<# lhistory>:<# index>
     custom

An example of running a gshare predictor with 10 bits of history
would be:
  bunzip -kc ../traces/int1_bz2 | ./predictor --gshare:10

---------------------------------
-- Implementing the Predictors --
---------------------------------

There are 3 methods which need to be implemented in the predictor.c file.
They are: init_predictor, make_prediction, and train_predictor.

void init_predictor();
This will be run before any predictions are made.  This is where you will
initialize any data structures or values you need for a particular branch
predictor 'bpType'.  All switches will be set prior to this function being
called.

uint8_t make_prediction(uint32_t pc);
You will be given the PC of a branch and are required to make a prediction of
TAKEN or NOTTAKEN which will then be checked back in the main execution loop.
You may want to break up the implementation of each type of branch predictor
into separate functions to improve readability.

void train_predictor(uint32_t pc, uint8_t outcome);
Once a prediction is made a call to train_predictor will be made so that you
can update any relevant data structures based on the true outcome of the branch.
You may want to break up the implementation of each type of branch predictor
into separate functions to improve readability.

<-- Gshare -->

Configuration:
    ghistoryBits    // Indicates the length of Global History kept

The Gshare predictor is characterized by XORing the global history register
with the lower bits (same length as the global history) of the branch's
address.  This XORed value is then used to index into a 1D BHT of
2-bit predictors.

<-- Local -->

Configuration:
    lhistoryBits    // Indicates the length of Local History kept in the PHT
    pcIndexBits     // Indicates the number of bits used to index the PHT

The Local predictor is characterized by using the address of a branch to index
into a 1D PHT where local branch history is kept.  This local history is then
used to index into a 1D BHT of 2-bit predictors.

<-- Tournament -->

Configuration:
    ghistoryBits    // Indicates the length of Global History kept
    lhistoryBits    // Indicates the length of Local History kept in the PHT
    pcIndexBits     // Indicates the number of bits used to index the PHT

You will be implementing the Tournament Predictor popularized by the
Alpha 21264.  The difference between the Alpha 21264's predictor and the one
you will be implementing is that all of the underlying counters in yours will
be 2-bit predictors.  You should NOT use a 3-bit counter as used in one of the
structure of the Alpha 21264's predictor.  See the Alpha 21264 paper for more
information on the general structure of this predictor.  The 'ghistoryBits'
will be used to size the global and choice predictors while the 'lhistoryBits'
and 'pcIndexBits' will be used to size the local predictor.

<-- Custom -->

Now that you have implemented 3 other predictors with rigid requirements, you
now have the opportunity to be creative and design your own predictor.  The
only requirement is that the total size of your custom predictor must not
exceed (64K + 256) bits (not bytes) of stored data and that your custom
predictor must outperform both the Gshare and Tournament predictors (details
below).


--------------------
-- Things to Note --
--------------------

All history should be initialized to NOTTAKEN.  History registers should be
updated by shifting in new history to the least significant bit position.

Ex. 4 bits of history, outcome of next branch is NT
  T NT T NT   <<  NT
  Result: NT T NT NT

All 2-bit predictors should be initialized to WN (Weakly Not Taken).
They should also have the following state transitions:
        NT      NT      NT
      ----->  ----->  ----->
    ST      WT      WN      SN
      <-----  <-----  <-----
        T       T       T

The Choice Predictor used to select which predictor to use in the Alpha 21264
Tournament predictor should be initialized to Weakly select the Global
Predictor.

-------------
-- Grading --
-------------

All grading will be done with respect to your predictor's Misprediciton Rate.
In order to get the points for your predictor you should achieve a
misprediction rate within some margin of the misprediction rate achieved by the
solution predictors.  Your predictors should correctly function based on
reasonably sized parameters (values between 1 and 31).

In order to get points for your Custom predictor it must beat the misprediction
rate achieved by the Tournament and Gshare predictors with similar size
constraints (64K + 256) bits.

Gshare      -   25 points
Local       -   25 points
Tournament  -   25 points
Custom      -   25 points
Total       =  100 points

In addition to the above rubric you will be competing with your fellow students
for extra points.  The top 5 students with the best misprediction rate for
their custom predictor will receive extra points based on the following tier:

1st place   -   5 points
2st place   -   4 points
3st place   -   3 points
4st place   -   2 points
5st place   -   1 points

Submissions which don't compile or have run-time errors will receive no points.

You should do most of your development on your own machine but you should log
into the lab machines we have allocated for our class in order to do final
testing.  We will be using these machines to grade your assignments so enusre
that it compiles and runs in that envorment.

You can ssh into the following machines using your Active Directory
credentials:

cseclass01.ucsd.edu
cseclass02.ucsd.edu
cseclass03.ucsd.edu
cseclass04.ucsd.edu
cseclass05.ucsd.edu
cseclass06.ucsd.edu
cseclass07.ucsd.edu

--------------------------
-- Turn-in Instructions --
--------------------------

DUE: May 10th, 2016 at 11:59:59 PM

Late projects are allowed for at most 3 days after the project due date.  For
each day late a 10% grade penalty is automatically attached (e.g. 3 days late =
30% penalty).  After 3 days, missing projects will recieve a zero.  A project
is considered late at 12:00:01 AM (Which is 1 second past Midnight).

Make sure that you have included your Name, PID, and Email in predictor.c
then you will run the packaging script 'package' to create a tarball of your
project.  The script will ask for your UCSD account name, this is your Active
Directory username which is the same as your UCSD email account name.  For
example, my UCSD email is "bmw014@eng.ucsd.edu" and my UCSD account name is
then "bmw014".  This is important because it will name your tarball according
to your account name.

Once your tarball has successfully been created you will need to email it to me
at bmw014@eng.ucsd.edu with the subject line: "cse240a Branch Project"
